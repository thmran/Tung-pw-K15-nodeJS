/// <reference types="node" />
import type { ContentType, ParameterOptions } from "allure-js-commons";
import { Status } from "allure-js-commons";
import type { Category } from "allure-js-commons/sdk";
interface StepInterface {
    parameter(name: string, value: string): void;
    name(name: string): void;
}
interface AttachmentOptions {
    contentType: ContentType | string;
    fileExtension?: string;
}
/**
 * @deprecated please use api exported by "allure-js-commons" instead.
 */
declare class LegacyAllureApi {
    /**
     * @deprecated please use import { epic } from "allure-js-commons" instead.
     */
    epic: (epic: string) => Promise<void>;
    /**
     * @deprecated please use import { feature } from "allure-js-commons" instead.
     */
    feature: (feature: string) => Promise<void>;
    /**
     * @deprecated please use import { story } from "allure-js-commons" instead.
     */
    story: (story: string) => Promise<void>;
    /**
     * @deprecated please use import { suite } from "allure-js-commons" instead.
     */
    suite: (name: string) => Promise<void>;
    /**
     * @deprecated please use import { parentSuite } from "allure-js-commons" instead.
     */
    parentSuite: (name: string) => Promise<void>;
    /**
     * @deprecated please use import { subSuite } from "allure-js-commons" instead.
     */
    subSuite: (name: string) => Promise<void>;
    /**
     * @deprecated please use import { label } from "allure-js-commons" instead.
     */
    label: (name: string, value: string) => Promise<void>;
    /**
     * @deprecated please use import { parameter } from "allure-js-commons" instead.
     */
    parameter: (name: string, value: any, options?: ParameterOptions) => Promise<void>;
    /**
     * @deprecated please use import { link } from "allure-js-commons" instead.
     */
    link: (url: string, name?: string, type?: string) => Promise<void>;
    /**
     * @deprecated please use import { issue } from "allure-js-commons" instead.
     */
    issue: (name: string, url: string) => Promise<void>;
    /**
     * @deprecated please use import { tms } from "allure-js-commons" instead.
     */
    tms: (name: string, url: string) => Promise<void>;
    /**
     * @deprecated please use import { description } from "allure-js-commons" instead.
     */
    description: (markdown: string) => Promise<void>;
    /**
     * @deprecated please use import { descriptionHtml } from "allure-js-commons" instead.
     */
    descriptionHtml: (html: string) => Promise<void>;
    /**
     * @deprecated please use import { owner } from "allure-js-commons" instead.
     */
    owner: (owner: string) => Promise<void>;
    /**
     * @deprecated please use import { severity } from "allure-js-commons" instead.
     */
    severity: (severity: string) => Promise<void>;
    /**
     * @deprecated please use import { layer } from "allure-js-commons" instead.
     */
    layer: (layer: string) => Promise<void>;
    /**
     * @deprecated please use import { allureId } from "allure-js-commons" instead.
     */
    id: (allureId: string) => Promise<void>;
    /**
     * @deprecated please use import { tag } from "allure-js-commons" instead.
     */
    tag: (tag: string) => Promise<void>;
    /**
     * @deprecated please use the `environmentInfo` config option instead.
     */
    writeEnvironmentInfo: (info: Record<string, string>) => void;
    /**
     * @deprecated please use the `categories` config option instead.
     */
    writeCategoriesDefinitions: (categories: Category[]) => void;
    /**
     * @deprecated please use import { attachment } from "allure-js-commons" instead.
     */
    attachment: (name: string, content: Buffer | string, options: ContentType | string | AttachmentOptions) => Promise<void>;
    /**
     * @deprecated please use import { attachment } from "allure-js-commons" instead.
     */
    testAttachment: (name: string, content: Buffer | string, options: ContentType | string | AttachmentOptions) => void;
    /**
     * @deprecated please use import { step } from "allure-js-commons" instead.
     */
    logStep: (name: string, status?: Status) => void;
    /**
     * @deprecated please use import { step } from "allure-js-commons" instead.
     */
    step: <T>(name: string, body: (step: StepInterface) => T) => T;
    private renameStep;
    private addStepParameter;
    private stopStepSuccess;
    private stopStepWithError;
}
export declare const allure: LegacyAllureApi;
export {};
