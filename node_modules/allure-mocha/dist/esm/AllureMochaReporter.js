var _excluded = ["resultsDir"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import * as Mocha from "mocha";
import { env } from "node:process";
import { LabelName } from "allure-js-commons";
import { Stage, Status } from "allure-js-commons";
import { getStatusFromError } from "allure-js-commons/sdk";
import { getHostLabel, getThreadLabel } from "allure-js-commons/sdk/reporter";
import { ReporterRuntime, createDefaultWriter, ensureSuiteLabels, getEnvironmentLabels, getPackageLabelFromPath, getRelativePath } from "allure-js-commons/sdk/reporter";
import { setGlobalTestRuntime } from "allure-js-commons/sdk/runtime";
import { MochaTestRuntime } from "./MochaTestRuntime.js";
import { setLegacyApiRuntime } from "./legacyUtils.js";
import { applyTestPlan, createTestPlanIndices, getAllureDisplayName, getAllureFullName, getAllureMetaLabels, getHookType, getSuitesOfMochaTest, getTestCaseId, getTestScope, isIncludedInTestRun, resolveParallelModeSetupFile, setTestScope } from "./utils.js";
var {
  EVENT_SUITE_BEGIN,
  EVENT_SUITE_END,
  EVENT_TEST_BEGIN,
  EVENT_TEST_END,
  EVENT_TEST_PASS,
  EVENT_TEST_FAIL,
  EVENT_TEST_PENDING,
  EVENT_HOOK_BEGIN,
  EVENT_HOOK_END,
  EVENT_TEST_RETRY
} = Mocha.Runner.constants;
export class AllureMochaReporter extends Mocha.reporters.Base {
  constructor(runner, _opts) {
    var _this;
    var isInWorker = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    super(runner, _opts);
    _this = this;
    _defineProperty(this, "runtime", void 0);
    _defineProperty(this, "testplan", void 0);
    _defineProperty(this, "testsMap", new Map());
    _defineProperty(this, "scopesStack", []);
    _defineProperty(this, "currentTest", void 0);
    _defineProperty(this, "currentHook", void 0);
    _defineProperty(this, "isInWorker", void 0);
    _defineProperty(this, "applyRuntimeMessages", function () {
      var _this$currentHook;
      var root = (_this$currentHook = _this.currentHook) !== null && _this$currentHook !== void 0 ? _this$currentHook : _this.currentTest;
      if (root) {
        for (var _len = arguments.length, message = new Array(_len), _key = 0; _key < _len; _key++) {
          message[_key] = arguments[_key];
        }
        _this.runtime.applyRuntimeMessages(root, message);
      }
    });
    /**
     * @deprecated for removal. Use reporter config option instead.
     */
    _defineProperty(this, "writeCategoriesDefinitions", categories => {
      this.runtime.categories = categories;
      if (this.isInWorker) {
        // done is not called in a worker; emit the file immediately
        this.runtime.writeCategoriesDefinitions();
      }
    });
    /**
     * @deprecated for removal. Use reporter config option instead.
     */
    _defineProperty(this, "writeEnvironmentInfo", environmentInfo => {
      this.runtime.environmentInfo = environmentInfo;
      if (this.isInWorker) {
        // done is not called in a worker; emit the file immediately
        this.runtime.writeEnvironmentInfo();
      }
    });
    /**
     * @deprecated for removal. Use reporter config option instead.
     */
    _defineProperty(this, "testAttachment", (name, content, options) => {
      var _this$currentHook2, _opts$encoding;
      var root = (_this$currentHook2 = this.currentHook) !== null && _this$currentHook2 !== void 0 ? _this$currentHook2 : this.currentTest;
      if (!root) {
        return;
      }
      var opts = typeof options === "string" ? {
        contentType: options
      } : options;
      var encoding = (_opts$encoding = opts.encoding) !== null && _opts$encoding !== void 0 ? _opts$encoding : "utf8";
      var buffer = typeof content === "string" ? Buffer.from(content, encoding) : content;
      this.runtime.writeAttachment(root, null, name, buffer, _objectSpread(_objectSpread({}, opts), {}, {
        wrapInStep: false
      }));
    });
    _defineProperty(this, "applyListeners", () => {
      this.runner.on(EVENT_SUITE_BEGIN, this.onSuite).on(EVENT_SUITE_END, this.onSuiteEnd).on(EVENT_TEST_BEGIN, this.onTest).on(EVENT_TEST_PASS, this.onPassed).on(EVENT_TEST_FAIL, this.onFailed).on(EVENT_TEST_RETRY, this.onFailed).on(EVENT_TEST_PENDING, this.onPending).on(EVENT_TEST_END, this.onTestEnd).on(EVENT_HOOK_BEGIN, this.onHookStart).on(EVENT_HOOK_END, this.onHookEnd);
    });
    _defineProperty(this, "onSuite", suite => {
      if (!suite.parent && this.testplan) {
        applyTestPlan(this.testplan.idIndex, this.testplan.fullNameIndex, suite);
      }
      var scopeUuid = this.runtime.startScope();
      this.scopesStack.push(scopeUuid);
    });
    _defineProperty(this, "onSuiteEnd", suite => {
      this.writeTestScopes(suite);
      var scopeUuid = this.scopesStack.pop();
      if (scopeUuid) {
        this.runtime.writeScope(scopeUuid);
      }
    });
    _defineProperty(this, "onTest", test => {
      if (this.currentTest) {
        var retriedTest = this.testsMap.get(this.currentTest);
        if (retriedTest) {
          this.onTestEnd(retriedTest);
          var testScope = getTestScope(retriedTest);
          if (testScope) {
            this.runtime.writeScope(testScope);
          }
        }
        this.testsMap.delete(this.currentTest);
        this.currentTest = undefined;
      }
      var globalLabels = getEnvironmentLabels().filter(label => !!label.value);
      var initialLabels = [{
        name: LabelName.LANGUAGE,
        value: "javascript"
      }, {
        name: LabelName.FRAMEWORK,
        value: this.getFrameworkName()
      }, getHostLabel(), getThreadLabel(this.getWorkerId())];
      var metaLabels = getAllureMetaLabels(test);
      var labels = globalLabels.concat(initialLabels, metaLabels);
      if (test.file) {
        var testPath = getRelativePath(test.file);
        var packageLabelFromPath = getPackageLabelFromPath(testPath);
        labels.push(packageLabelFromPath);
      }
      var scopeUuid = this.runtime.startScope();
      setTestScope(test, scopeUuid);

      // @ts-ignore
      var retryNum = "currentRetry" in test ? test.currentRetry() : 0;
      var parameters = retryNum ? [{
        name: "Retry",
        value: "".concat(retryNum),
        excluded: true
      }] : [];
      this.currentTest = this.runtime.startTest({
        name: getAllureDisplayName(test),
        stage: Stage.RUNNING,
        fullName: getAllureFullName(test),
        labels,
        testCaseId: getTestCaseId(test),
        parameters: parameters
      }, [...this.scopesStack, scopeUuid]);
      this.testsMap.set(this.currentTest, test);
    });
    _defineProperty(this, "onPassed", () => {
      if (!this.currentTest) {
        return;
      }
      this.runtime.updateTest(this.currentTest, r => {
        r.status = Status.PASSED;
      });
    });
    _defineProperty(this, "onFailed", (_, error) => {
      if (!this.currentTest) {
        return;
      }
      this.runtime.updateTest(this.currentTest, r => {
        r.status = getStatusFromError(error);
        r.statusDetails = {
          message: error.message,
          trace: error.stack
        };
      });
    });
    _defineProperty(this, "onPending", test => {
      if (isIncludedInTestRun(test)) {
        if (!this.currentTest) {
          this.onTest(test);
        }
        this.runtime.updateTest(this.currentTest, r => {
          r.status = Status.SKIPPED;
          r.statusDetails = {
            message: "Test skipped"
          };
        });
      }
    });
    _defineProperty(this, "onTestEnd", test => {
      if (!this.currentTest) {
        return;
      }
      if (isIncludedInTestRun(test)) {
        var defaultSuites = getSuitesOfMochaTest(test);
        this.runtime.updateTest(this.currentTest, t => {
          ensureSuiteLabels(t, defaultSuites);
          t.stage = Stage.FINISHED;
        });
        this.runtime.stopTest(this.currentTest);
        this.runtime.writeTest(this.currentTest);
        this.testsMap.delete(this.currentTest);
        this.currentTest = undefined;

        // We're writing the test's dedicated scope in onSuiteEnd instead of here
        // because there might be afterEach hooks, which are reported after
        // onTestEnd, not before.
      }
    });
    _defineProperty(this, "onHookStart", hook => {
      var _hook$ctx, _ref, _hook$originalTitle;
      var [hookCategory, hookScope] = getHookType(hook);
      var test = (_hook$ctx = hook.ctx) === null || _hook$ctx === void 0 ? void 0 : _hook$ctx.currentTest;
      var scopeUuid = hookScope === "each" && test ? getTestScope(test) : this.getCurrentSuiteScope();
      if (!scopeUuid) {
        return;
      }
      var name = (_ref = (_hook$originalTitle = hook.originalTitle) !== null && _hook$originalTitle !== void 0 ? _hook$originalTitle : hook.title) !== null && _ref !== void 0 ? _ref : "";
      if (hookCategory) {
        this.currentHook = this.runtime.startFixture(scopeUuid, hookCategory, {
          name
        });
      }
    });
    _defineProperty(this, "onHookEnd", hook => {
      if (!this.currentHook) {
        return;
      }
      this.runtime.updateFixture(this.currentHook, r => {
        var error = hook.error();
        if (error) {
          r.status = getStatusFromError(error);
          r.statusDetails = {
            message: error.message,
            trace: error.stack
          };
        } else {
          r.status = Status.PASSED;
        }
      });
      this.runtime.stopFixture(this.currentHook);
      this.currentHook = undefined;
    });
    _defineProperty(this, "writeTestScopes", suite => {
      suite.tests.forEach(test => {
        var testScopeUuid = getTestScope(test);
        if (testScopeUuid) {
          this.runtime.writeScope(testScopeUuid);
        }
      });
    });
    _defineProperty(this, "getCurrentSuiteScope", () => this.scopesStack.length > 0 ? this.scopesStack[this.scopesStack.length - 1] : undefined);
    _defineProperty(this, "getFrameworkName", () => "mocha");
    _defineProperty(this, "getWorkerId", () => env.MOCHA_WORKER_ID);
    var _ref2 = _opts.reporterOptions || {},
      {
        resultsDir
      } = _ref2,
      restOptions = _objectWithoutProperties(_ref2, _excluded);
    this.isInWorker = isInWorker;
    this.runtime = new ReporterRuntime(_objectSpread({
      writer: createDefaultWriter({
        resultsDir
      })
    }, restOptions));
    this.testplan = createTestPlanIndices();
    var testRuntime = new MochaTestRuntime(this.applyRuntimeMessages);
    setGlobalTestRuntime(testRuntime);
    setLegacyApiRuntime(this);
    if (_opts.parallel) {
      var _opts$require;
      _opts.require = [...((_opts$require = _opts.require) !== null && _opts$require !== void 0 ? _opts$require : []), resolveParallelModeSetupFile()];
    } else {
      this.applyListeners();
    }
  }
  done(failures, fn) {
    this.runtime.writeEnvironmentInfo();
    this.runtime.writeCategoriesDefinitions();
    return fn === null || fn === void 0 ? void 0 : fn(failures);
  }
}
//# sourceMappingURL=AllureMochaReporter.js.map