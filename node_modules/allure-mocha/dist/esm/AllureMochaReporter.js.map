{"version":3,"file":"AllureMochaReporter.js","names":["Mocha","env","LabelName","Stage","Status","getStatusFromError","getHostLabel","getThreadLabel","ReporterRuntime","createDefaultWriter","ensureSuiteLabels","getEnvironmentLabels","getPackageLabelFromPath","getRelativePath","setGlobalTestRuntime","MochaTestRuntime","setLegacyApiRuntime","applyTestPlan","createTestPlanIndices","getAllureDisplayName","getAllureFullName","getAllureMetaLabels","getHookType","getSuitesOfMochaTest","getTestCaseId","getTestScope","isIncludedInTestRun","resolveParallelModeSetupFile","setTestScope","EVENT_SUITE_BEGIN","EVENT_SUITE_END","EVENT_TEST_BEGIN","EVENT_TEST_END","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_TEST_PENDING","EVENT_HOOK_BEGIN","EVENT_HOOK_END","EVENT_TEST_RETRY","Runner","constants","AllureMochaReporter","reporters","Base","constructor","runner","opts","_this","isInWorker","arguments","length","undefined","this","_defineProperty","Map","_this$currentHook","root","currentHook","currentTest","_len","message","Array","_key","runtime","applyRuntimeMessages","categories","writeCategoriesDefinitions","environmentInfo","writeEnvironmentInfo","name","content","options","_this$currentHook2","_opts$encoding","contentType","encoding","buffer","Buffer","from","writeAttachment","_objectSpread","wrapInStep","on","onSuite","onSuiteEnd","onTest","onPassed","onFailed","onPending","onTestEnd","onHookStart","onHookEnd","suite","parent","testplan","idIndex","fullNameIndex","scopeUuid","startScope","scopesStack","push","writeTestScopes","pop","writeScope","test","retriedTest","testsMap","get","testScope","delete","globalLabels","filter","label","value","initialLabels","LANGUAGE","FRAMEWORK","getFrameworkName","getWorkerId","metaLabels","labels","concat","file","testPath","packageLabelFromPath","retryNum","currentRetry","parameters","excluded","startTest","stage","RUNNING","fullName","testCaseId","set","updateTest","r","status","PASSED","_","error","statusDetails","trace","stack","SKIPPED","defaultSuites","t","FINISHED","stopTest","writeTest","hook","_hook$ctx","_ref","_hook$originalTitle","hookCategory","hookScope","ctx","getCurrentSuiteScope","originalTitle","title","startFixture","updateFixture","stopFixture","tests","forEach","testScopeUuid","MOCHA_WORKER_ID","_ref2","reporterOptions","resultsDir","restOptions","_objectWithoutProperties","_excluded","writer","testRuntime","parallel","_opts$require","require","applyListeners","done","failures","fn"],"sources":["../../src/AllureMochaReporter.ts"],"sourcesContent":["import * as Mocha from \"mocha\";\nimport { env } from \"node:process\";\nimport { type AttachmentOptions, type ContentType, type Label, LabelName, type Parameter } from \"allure-js-commons\";\nimport { Stage, Status } from \"allure-js-commons\";\nimport type { Category, RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getStatusFromError } from \"allure-js-commons/sdk\";\nimport { getHostLabel, getThreadLabel } from \"allure-js-commons/sdk/reporter\";\nimport type { ReporterConfig } from \"allure-js-commons/sdk/reporter\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  ensureSuiteLabels,\n  getEnvironmentLabels,\n  getPackageLabelFromPath,\n  getRelativePath,\n} from \"allure-js-commons/sdk/reporter\";\nimport { setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { MochaTestRuntime } from \"./MochaTestRuntime.js\";\nimport { setLegacyApiRuntime } from \"./legacyUtils.js\";\nimport type { TestPlanIndices } from \"./types.js\";\nimport {\n  applyTestPlan,\n  createTestPlanIndices,\n  getAllureDisplayName,\n  getAllureFullName,\n  getAllureMetaLabels,\n  getHookType,\n  getSuitesOfMochaTest,\n  getTestCaseId,\n  getTestScope,\n  isIncludedInTestRun,\n  resolveParallelModeSetupFile,\n  setTestScope,\n} from \"./utils.js\";\n\nconst {\n  EVENT_SUITE_BEGIN,\n  EVENT_SUITE_END,\n  EVENT_TEST_BEGIN,\n  EVENT_TEST_END,\n  EVENT_TEST_PASS,\n  EVENT_TEST_FAIL,\n  EVENT_TEST_PENDING,\n  EVENT_HOOK_BEGIN,\n  EVENT_HOOK_END,\n  EVENT_TEST_RETRY,\n} = Mocha.Runner.constants;\n\nexport class AllureMochaReporter extends Mocha.reporters.Base {\n  protected readonly runtime: ReporterRuntime;\n  protected readonly testplan?: TestPlanIndices;\n  protected readonly testsMap: Map<string, Mocha.Test> = new Map();\n  protected scopesStack: string[] = [];\n  protected currentTest?: string;\n  protected currentHook?: string;\n  private readonly isInWorker: boolean;\n\n  constructor(runner: Mocha.Runner, opts: Mocha.MochaOptions, isInWorker: boolean = false) {\n    super(runner, opts);\n\n    const { resultsDir, ...restOptions }: ReporterConfig = opts.reporterOptions || {};\n\n    this.isInWorker = isInWorker;\n    this.runtime = new ReporterRuntime({\n      writer: createDefaultWriter({ resultsDir }),\n      ...restOptions,\n    });\n    this.testplan = createTestPlanIndices();\n\n    const testRuntime = new MochaTestRuntime(this.applyRuntimeMessages);\n\n    setGlobalTestRuntime(testRuntime);\n    setLegacyApiRuntime(this);\n\n    if (opts.parallel) {\n      opts.require = [...(opts.require ?? []), resolveParallelModeSetupFile()];\n    } else {\n      this.applyListeners();\n    }\n  }\n\n  applyRuntimeMessages = (...message: RuntimeMessage[]) => {\n    const root = this.currentHook ?? this.currentTest;\n    if (root) {\n      this.runtime.applyRuntimeMessages(root, message);\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  writeCategoriesDefinitions = (categories: Category[]) => {\n    this.runtime.categories = categories;\n    if (this.isInWorker) {\n      // done is not called in a worker; emit the file immediately\n      this.runtime.writeCategoriesDefinitions();\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  writeEnvironmentInfo = (environmentInfo: Record<string, string>) => {\n    this.runtime.environmentInfo = environmentInfo;\n    if (this.isInWorker) {\n      // done is not called in a worker; emit the file immediately\n      this.runtime.writeEnvironmentInfo();\n    }\n  };\n\n  /**\n   * @deprecated for removal. Use reporter config option instead.\n   */\n  testAttachment = (name: string, content: Buffer | string, options: ContentType | string | AttachmentOptions) => {\n    const root = this.currentHook ?? this.currentTest;\n    if (!root) {\n      return;\n    }\n    const opts = typeof options === \"string\" ? { contentType: options } : options;\n    const encoding = opts.encoding ?? \"utf8\";\n    const buffer = typeof content === \"string\" ? Buffer.from(content, encoding) : content;\n    this.runtime.writeAttachment(root, null, name, buffer, { ...opts, wrapInStep: false });\n  };\n\n  override done(failures: number, fn?: ((failures: number) => void) | undefined): void {\n    this.runtime.writeEnvironmentInfo();\n    this.runtime.writeCategoriesDefinitions();\n    return fn?.(failures);\n  }\n\n  private applyListeners = () => {\n    this.runner\n      .on(EVENT_SUITE_BEGIN, this.onSuite)\n      .on(EVENT_SUITE_END, this.onSuiteEnd)\n      .on(EVENT_TEST_BEGIN, this.onTest)\n      .on(EVENT_TEST_PASS, this.onPassed)\n      .on(EVENT_TEST_FAIL, this.onFailed)\n      .on(EVENT_TEST_RETRY, this.onFailed)\n      .on(EVENT_TEST_PENDING, this.onPending)\n      .on(EVENT_TEST_END, this.onTestEnd)\n      .on(EVENT_HOOK_BEGIN, this.onHookStart)\n      .on(EVENT_HOOK_END, this.onHookEnd);\n  };\n\n  private onSuite = (suite: Mocha.Suite) => {\n    if (!suite.parent && this.testplan) {\n      applyTestPlan(this.testplan.idIndex, this.testplan.fullNameIndex, suite);\n    }\n    const scopeUuid = this.runtime.startScope();\n    this.scopesStack.push(scopeUuid);\n  };\n\n  private onSuiteEnd = (suite: Mocha.Suite) => {\n    this.writeTestScopes(suite);\n    const scopeUuid = this.scopesStack.pop();\n    if (scopeUuid) {\n      this.runtime.writeScope(scopeUuid);\n    }\n  };\n\n  private onTest = (test: Mocha.Test) => {\n    if (this.currentTest) {\n      const retriedTest = this.testsMap.get(this.currentTest);\n      if (retriedTest) {\n        this.onTestEnd(retriedTest);\n        const testScope = getTestScope(retriedTest);\n        if (testScope) {\n          this.runtime.writeScope(testScope);\n        }\n      }\n      this.testsMap.delete(this.currentTest);\n      this.currentTest = undefined;\n    }\n\n    const globalLabels = getEnvironmentLabels().filter((label) => !!label.value);\n    const initialLabels: Label[] = [\n      { name: LabelName.LANGUAGE, value: \"javascript\" },\n      { name: LabelName.FRAMEWORK, value: this.getFrameworkName() },\n      getHostLabel(),\n      getThreadLabel(this.getWorkerId()),\n    ];\n    const metaLabels = getAllureMetaLabels(test);\n    const labels = globalLabels.concat(initialLabels, metaLabels);\n\n    if (test.file) {\n      const testPath = getRelativePath(test.file);\n      const packageLabelFromPath: Label = getPackageLabelFromPath(testPath);\n      labels.push(packageLabelFromPath);\n    }\n\n    const scopeUuid = this.runtime.startScope();\n    setTestScope(test, scopeUuid);\n\n    // @ts-ignore\n    const retryNum = \"currentRetry\" in test ? test.currentRetry() : 0;\n    const parameters: Parameter[] = retryNum ? [{ name: \"Retry\", value: `${retryNum}`, excluded: true }] : [];\n\n    this.currentTest = this.runtime.startTest(\n      {\n        name: getAllureDisplayName(test),\n        stage: Stage.RUNNING,\n        fullName: getAllureFullName(test),\n        labels,\n        testCaseId: getTestCaseId(test),\n        parameters: parameters,\n      },\n      [...this.scopesStack, scopeUuid],\n    );\n    this.testsMap.set(this.currentTest, test);\n  };\n\n  private onPassed = () => {\n    if (!this.currentTest) {\n      return;\n    }\n    this.runtime.updateTest(this.currentTest, (r) => {\n      r.status = Status.PASSED;\n    });\n  };\n\n  private onFailed = (_: Mocha.Test, error: Error) => {\n    if (!this.currentTest) {\n      return;\n    }\n    this.runtime.updateTest(this.currentTest, (r) => {\n      r.status = getStatusFromError(error);\n      r.statusDetails = {\n        message: error.message,\n        trace: error.stack,\n      };\n    });\n  };\n\n  private onPending = (test: Mocha.Test) => {\n    if (isIncludedInTestRun(test)) {\n      if (!this.currentTest) {\n        this.onTest(test);\n      }\n      this.runtime.updateTest(this.currentTest!, (r) => {\n        r.status = Status.SKIPPED;\n        r.statusDetails = {\n          message: \"Test skipped\",\n        };\n      });\n    }\n  };\n\n  private onTestEnd = (test: Mocha.Test) => {\n    if (!this.currentTest) {\n      return;\n    }\n    if (isIncludedInTestRun(test)) {\n      const defaultSuites = getSuitesOfMochaTest(test);\n      this.runtime.updateTest(this.currentTest, (t) => {\n        ensureSuiteLabels(t, defaultSuites);\n        t.stage = Stage.FINISHED;\n      });\n      this.runtime.stopTest(this.currentTest);\n      this.runtime.writeTest(this.currentTest);\n      this.testsMap.delete(this.currentTest);\n      this.currentTest = undefined;\n\n      // We're writing the test's dedicated scope in onSuiteEnd instead of here\n      // because there might be afterEach hooks, which are reported after\n      // onTestEnd, not before.\n    }\n  };\n\n  private onHookStart = (hook: Mocha.Hook) => {\n    const [hookCategory, hookScope] = getHookType(hook);\n    const test = hook.ctx?.currentTest;\n    const scopeUuid = hookScope === \"each\" && test ? getTestScope(test) : this.getCurrentSuiteScope();\n    if (!scopeUuid) {\n      return;\n    }\n\n    const name = hook.originalTitle ?? hook.title ?? \"\";\n    if (hookCategory) {\n      this.currentHook = this.runtime.startFixture(scopeUuid, hookCategory, { name });\n    }\n  };\n\n  private onHookEnd = (hook: Mocha.Hook) => {\n    if (!this.currentHook) {\n      return;\n    }\n    this.runtime.updateFixture(this.currentHook, (r) => {\n      const error: Error | undefined = hook.error();\n      if (error) {\n        r.status = getStatusFromError(error);\n        r.statusDetails = {\n          message: error.message,\n          trace: error.stack,\n        };\n      } else {\n        r.status = Status.PASSED;\n      }\n    });\n    this.runtime.stopFixture(this.currentHook);\n    this.currentHook = undefined;\n  };\n\n  private writeTestScopes = (suite: Mocha.Suite) => {\n    suite.tests.forEach((test) => {\n      const testScopeUuid = getTestScope(test);\n      if (testScopeUuid) {\n        this.runtime.writeScope(testScopeUuid);\n      }\n    });\n  };\n\n  private getCurrentSuiteScope = () =>\n    this.scopesStack.length > 0 ? this.scopesStack[this.scopesStack.length - 1] : undefined;\n\n  protected getFrameworkName = (): string => \"mocha\";\n\n  protected getWorkerId = (): string | undefined => env.MOCHA_WORKER_ID;\n}\n"],"mappings":"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","ignoreList":[]}