"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allure = void 0;
var _allureJsCommons = _interopRequireWildcard(require("allure-js-commons"));
var commons = _allureJsCommons;
var _sdk = require("allure-js-commons/sdk");
var _reporter = require("allure-js-commons/sdk/reporter");
var _legacyUtils = require("./legacyUtils.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// noinspection JSDeprecatedSymbols
/**
 * @deprecated please use api exported by "allure-js-commons" instead.
 */
class LegacyAllureApi {
  constructor() {
    /**
     * @deprecated please use import { epic } from "allure-js-commons" instead.
     */
    _defineProperty(this, "epic", epic => Promise.resolve(commons.epic(epic)));
    /**
     * @deprecated please use import { feature } from "allure-js-commons" instead.
     */
    _defineProperty(this, "feature", feature => Promise.resolve(commons.feature(feature)));
    /**
     * @deprecated please use import { story } from "allure-js-commons" instead.
     */
    _defineProperty(this, "story", story => Promise.resolve(commons.story(story)));
    /**
     * @deprecated please use import { suite } from "allure-js-commons" instead.
     */
    _defineProperty(this, "suite", name => Promise.resolve(commons.suite(name)));
    /**
     * @deprecated please use import { parentSuite } from "allure-js-commons" instead.
     */
    _defineProperty(this, "parentSuite", name => Promise.resolve(commons.parentSuite(name)));
    /**
     * @deprecated please use import { subSuite } from "allure-js-commons" instead.
     */
    _defineProperty(this, "subSuite", name => Promise.resolve(commons.subSuite(name)));
    /**
     * @deprecated please use import { label } from "allure-js-commons" instead.
     */
    _defineProperty(this, "label", (name, value) => Promise.resolve(commons.label(name, value)));
    /**
     * @deprecated please use import { parameter } from "allure-js-commons" instead.
     */
    _defineProperty(this, "parameter", (name, value, options) => Promise.resolve(commons.parameter(name, (0, _reporter.serialize)(value), options)));
    /**
     * @deprecated please use import { link } from "allure-js-commons" instead.
     */
    _defineProperty(this, "link", (url, name, type) => Promise.resolve(commons.link(url, name, type)));
    /**
     * @deprecated please use import { issue } from "allure-js-commons" instead.
     */
    _defineProperty(this, "issue", (name, url) => Promise.resolve(commons.issue(url, name)));
    /**
     * @deprecated please use import { tms } from "allure-js-commons" instead.
     */
    _defineProperty(this, "tms", (name, url) => Promise.resolve(commons.tms(url, name)));
    /**
     * @deprecated please use import { description } from "allure-js-commons" instead.
     */
    _defineProperty(this, "description", markdown => Promise.resolve(commons.description(markdown)));
    /**
     * @deprecated please use import { descriptionHtml } from "allure-js-commons" instead.
     */
    _defineProperty(this, "descriptionHtml", html => Promise.resolve(commons.descriptionHtml(html)));
    /**
     * @deprecated please use import { owner } from "allure-js-commons" instead.
     */
    _defineProperty(this, "owner", owner => Promise.resolve(commons.owner(owner)));
    /**
     * @deprecated please use import { severity } from "allure-js-commons" instead.
     */
    _defineProperty(this, "severity", severity => Promise.resolve(commons.severity(severity)));
    /**
     * @deprecated please use import { layer } from "allure-js-commons" instead.
     */
    _defineProperty(this, "layer", layer => Promise.resolve(commons.layer(layer)));
    /**
     * @deprecated please use import { allureId } from "allure-js-commons" instead.
     */
    _defineProperty(this, "id", allureId => Promise.resolve(commons.allureId(allureId)));
    /**
     * @deprecated please use import { tag } from "allure-js-commons" instead.
     */
    _defineProperty(this, "tag", tag => Promise.resolve(commons.tag(tag)));
    /**
     * @deprecated please use the `environmentInfo` config option instead.
     */
    _defineProperty(this, "writeEnvironmentInfo", info => {
      var _getLegacyApiRuntime;
      (_getLegacyApiRuntime = (0, _legacyUtils.getLegacyApiRuntime)()) === null || _getLegacyApiRuntime === void 0 || _getLegacyApiRuntime.writeEnvironmentInfo(info);
    });
    /**
     * @deprecated please use the `categories` config option instead.
     */
    _defineProperty(this, "writeCategoriesDefinitions", categories => {
      var _getLegacyApiRuntime2;
      (_getLegacyApiRuntime2 = (0, _legacyUtils.getLegacyApiRuntime)()) === null || _getLegacyApiRuntime2 === void 0 || _getLegacyApiRuntime2.writeCategoriesDefinitions(categories);
    });
    /**
     * @deprecated please use import { attachment } from "allure-js-commons" instead.
     */
    _defineProperty(this, "attachment", (name, content, options) => Promise.resolve(commons.attachment(name, content, typeof options === "string" ? {
      contentType: options
    } : options)));
    /**
     * @deprecated please use import { attachment } from "allure-js-commons" instead.
     */
    _defineProperty(this, "testAttachment", (name, content, options) => {
      var runtime = (0, _legacyUtils.getLegacyApiRuntime)();
      runtime.testAttachment(name, content, options);
    });
    /**
     * @deprecated please use import { step } from "allure-js-commons" instead.
     */
    _defineProperty(this, "logStep", (name, status) => {
      var runtime = (0, _legacyUtils.getLegacyApiRuntime)();
      var timestamp = Date.now();
      runtime === null || runtime === void 0 || runtime.applyRuntimeMessages({
        type: "step_start",
        data: {
          name,
          start: timestamp
        }
      }, {
        type: "step_stop",
        data: {
          status: status !== null && status !== void 0 ? status : _allureJsCommons.Status.PASSED,
          stop: timestamp
        }
      });
    });
    // It's sync-first. That's why we can't simply reuse commons.step.
    /**
     * @deprecated please use import { step } from "allure-js-commons" instead.
     */
    _defineProperty(this, "step", (name, body) => {
      var runtime = (0, _legacyUtils.getLegacyApiRuntime)();
      runtime === null || runtime === void 0 || runtime.applyRuntimeMessages({
        type: "step_start",
        data: {
          name,
          start: Date.now()
        }
      });
      try {
        var result = body({
          name: this.renameStep,
          parameter: this.addStepParameter
        });
        if ((0, _sdk.isPromise)(result)) {
          return result.then(v => {
            this.stopStepSuccess();
            return v;
          }, e => {
            this.stopStepWithError(e);
            throw e;
          });
        }
        this.stopStepSuccess();
        return result;
      } catch (e) {
        this.stopStepWithError(e);
        throw e;
      }
    });
    _defineProperty(this, "renameStep", name => {
      var _getLegacyApiRuntime3;
      (_getLegacyApiRuntime3 = (0, _legacyUtils.getLegacyApiRuntime)()) === null || _getLegacyApiRuntime3 === void 0 || _getLegacyApiRuntime3.applyRuntimeMessages({
        type: "step_metadata",
        data: {
          name
        }
      });
    });
    _defineProperty(this, "addStepParameter", (name, value) => {
      var _getLegacyApiRuntime4;
      (_getLegacyApiRuntime4 = (0, _legacyUtils.getLegacyApiRuntime)()) === null || _getLegacyApiRuntime4 === void 0 || _getLegacyApiRuntime4.applyRuntimeMessages({
        type: "step_metadata",
        data: {
          parameters: [{
            name,
            value
          }]
        }
      });
    });
    _defineProperty(this, "stopStepSuccess", () => {
      var _getLegacyApiRuntime5;
      (_getLegacyApiRuntime5 = (0, _legacyUtils.getLegacyApiRuntime)()) === null || _getLegacyApiRuntime5 === void 0 || _getLegacyApiRuntime5.applyRuntimeMessages({
        type: "step_stop",
        data: {
          status: _allureJsCommons.Status.PASSED,
          stop: Date.now()
        }
      });
    });
    _defineProperty(this, "stopStepWithError", error => {
      var _getLegacyApiRuntime6;
      var {
        message,
        stack
      } = error;
      (_getLegacyApiRuntime6 = (0, _legacyUtils.getLegacyApiRuntime)()) === null || _getLegacyApiRuntime6 === void 0 || _getLegacyApiRuntime6.applyRuntimeMessages({
        type: "step_stop",
        data: {
          status: (0, _sdk.getStatusFromError)(error),
          stop: Date.now(),
          statusDetails: {
            message,
            trace: stack
          }
        }
      });
    });
  }
}
var allure = exports.allure = new LegacyAllureApi();
//# sourceMappingURL=legacy.js.map